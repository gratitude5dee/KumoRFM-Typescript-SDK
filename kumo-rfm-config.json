// ============================================================================
// package.json
// ============================================================================
{
  "name": "kumo-rfm-sdk",
  "version": "1.0.0",
  "description": "TypeScript SDK for KumoRFM - A foundation model for business data predictions",
  "main": "dist/index.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist",
    "src"
  ],
  "scripts": {
    "build": "npm run clean && npm run build:cjs && npm run build:esm && npm run build:umd && npm run build:types",
    "build:cjs": "tsc --module commonjs --outDir dist/cjs",
    "build:esm": "tsc --module esnext --outDir dist/esm",
    "build:umd": "rollup -c rollup.config.js",
    "build:types": "tsc --declaration --emitDeclarationOnly --outDir dist/types",
    "clean": "rimraf dist",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint src --ext .ts",
    "lint:fix": "eslint src --ext .ts --fix",
    "format": "prettier --write \"src/**/*.ts\" \"tests/**/*.ts\"",
    "prepublishOnly": "npm run build && npm run test",
    "docs": "typedoc --out docs src/index.ts"
  },
  "keywords": [
    "kumo",
    "rfm",
    "machine-learning",
    "predictive-analytics",
    "typescript",
    "sdk",
    "business-intelligence",
    "data-science"
  ],
  "author": "Your Name",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/yourusername/kumo-rfm-sdk"
  },
  "bugs": {
    "url": "https://github.com/yourusername/kumo-rfm-sdk/issues"
  },
  "homepage": "https://github.com/yourusername/kumo-rfm-sdk#readme",
  "dependencies": {
    "zod": "^3.22.0"
  },
  "devDependencies": {
    "@types/jest": "^29.5.0",
    "@types/node": "^20.0.0",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.50.0",
    "eslint-config-prettier": "^9.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "rimraf": "^5.0.0",
    "rollup": "^4.0.0",
    "rollup-plugin-typescript2": "^0.36.0",
    "ts-jest": "^29.1.0",
    "ts-node": "^10.9.0",
    "typedoc": "^0.25.0",
    "typescript": "^5.2.0"
  },
  "engines": {
    "node": ">=16.0.0"
  },
  "publishConfig": {
    "access": "public"
  }
}

// ============================================================================
// tsconfig.json
// ============================================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ESNext",
    "lib": ["ES2020", "DOM"],
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "tests", "examples"]
}

// ============================================================================
// jest.config.js
// ============================================================================
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/tests'],
  testMatch: ['**/__tests__/**/*.ts', '**/?(*.)+(spec|test).ts'],
  transform: {
    '^.+\\.ts: 'ts-jest',
  },
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.d.ts',
    '!src/**/index.ts',
  ],
  coverageDirectory: 'coverage',
  coverageReporters: ['text', 'lcov', 'html'],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 90,
      lines: 90,
      statements: 90,
    },
  },
  moduleNameMapper: {
    '^@/(.*): '<rootDir>/src/$1',
  },
  globals: {
    'ts-jest': {
      tsconfig: {
        esModuleInterop: true,
      },
    },
  },
};

// ============================================================================
// .eslintrc.json
// ============================================================================
{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "prettier"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/consistent-type-imports": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "no-console": ["warn", { "allow": ["warn", "error"] }],
    "prefer-const": "error",
    "no-var": "error"
  },
  "ignorePatterns": ["dist", "node_modules", "coverage", "*.js"]
}

// ============================================================================
// .prettierrc.json
// ============================================================================
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "always",
  "endOfLine": "lf"
}

// ============================================================================
// rollup.config.js
// ============================================================================
import typescript from 'rollup-plugin-typescript2';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import { terser } from 'rollup-plugin-terser';

export default [
  // UMD build
  {
    input: 'src/index.ts',
    output: {
      file: 'dist/kumo-rfm.umd.js',
      format: 'umd',
      name: 'KumoRFM',
      globals: {
        zod: 'Zod'
      }
    },
    external: ['zod'],
    plugins: [
      nodeResolve(),
      commonjs(),
      typescript({
        typescript: require('typescript'),
        tsconfig: './tsconfig.json',
      }),
      terser()
    ]
  },
  // ESM build
  {
    input: 'src/index.ts',
    output: {
      file: 'dist/kumo-rfm.esm.js',
      format: 'es'
    },
    external: ['zod'],
    plugins: [
      nodeResolve(),
      typescript({
        typescript: require('typescript'),
        tsconfig: './tsconfig.json',
      })
    ]
  }
];

// ============================================================================
// .gitignore
// ============================================================================
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Build outputs
dist/
build/
*.tsbuildinfo

# Testing
coverage/
*.lcov
.nyc_output/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store

# Environment
.env
.env.local
.env.*.local

# Logs
logs/
*.log

# Temporary files
tmp/
temp/

# Documentation
docs/

// ============================================================================
// .npmignore
// ============================================================================
# Source files (only ship built files)
src/
tests/
examples/

# Configuration files
tsconfig.json
.eslintrc.json
.prettierrc.json
rollup.config.js
jest.config.js

# Development files
*.test.ts
*.spec.ts
coverage/
.nyc_output/

# IDE and OS files
.vscode/
.idea/
.DS_Store
*.swp
*.swo

# Git files
.git/
.gitignore

# Documentation source
docs/

# Environment files
.env
.env.*

# CI/CD
.github/
.gitlab-ci.yml
.travis.yml